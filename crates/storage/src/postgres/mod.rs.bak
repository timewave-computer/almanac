/// PostgreSQL module and storage implementation
use crate::{
    ValenceProcessorInfo, ValenceProcessorConfig, ValenceProcessorMessage, ValenceMessageStatus,
    ValenceProcessorState, ValenceAuthorizationInfo, ValenceAuthorizationPolicy, ValenceAuthorizationGrant,
    ValenceAuthorizationRequest, ValenceAuthorizationDecision, ValenceLibraryInfo, ValenceLibraryVersion,
    ValenceLibraryUsage, ValenceLibraryState, ValenceLibraryApproval
};
use tracing::{debug, info, warn};
use std::sync::Arc;
use std::collections::HashMap;

use async_trait::async_trait;
use indexer_common::{Error, Result, BlockStatus};
use indexer_core::event::Event;
use sqlx::{Pool, Postgres, types::Json, Transaction};
use tracing::{debug, info, instrument, warn};

use crate::EventFilter;
use crate::Storage;
use crate::migrations::initialize_database;
use crate::{ValenceAccountInfo, ValenceAccountLibrary, ValenceAccountExecution, ValenceAccountState};

pub mod repositories;
pub mod migrations;

// Use the repositories directly instead of using paths
use repositories::event_repository::{EventRepository, PostgresEventRepository};
use repositories::contract_schema_repository::{
    ContractSchemaRepository, PostgresContractSchemaRepository
};

/// PostgreSQL storage configuration
#[derive(Debug, Clone)]
pub struct PostgresConfig {
    /// Database connection URL
    pub url: String,
    
    /// Max connections in the pool
    pub max_connections: u32,
    
    /// Connection timeout in seconds
    pub connection_timeout: u64,
}

impl Default for PostgresConfig {
    fn default() -> Self {
        Self {
            url: "postgres://postgres:postgres@localhost:5432/indexer".to_string(),
            max_connections: 5,
            connection_timeout: 30,
        }
    }
}

/// PostgreSQL storage
pub struct PostgresStorage {
    /// Database connection pool
    pool: Pool<Postgres>,
    
    /// Event repository
    event_repository: Arc<dyn EventRepository>,
    
    /// Contract schema repository
    contract_schema_repository: Arc<dyn ContractSchemaRepository>,
}

#[async_trait]
impl Storage for PostgresStorage {
    async fn store_event(&self, event: Box<dyn Event>) -> Result<()> {
        let transaction = self.pool.begin().await?;
        
        // Store the event using the repository
        self.event_repository.store_event(event).await?;
        
        // Commit the transaction
        transaction.commit().await?;
        
        Ok(())
    }
    
    async fn get_events(&self, filters: Vec<EventFilter>) -> Result<Vec<Box<dyn Event>>> {
        // Get events using the repository
        self.event_repository.get_events(filters).await
    }
    
    async fn get_latest_block(&self, chain: &str) -> Result<u64> {
        // Get the latest block using the repository
        self.event_repository.get_latest_block(chain).await
    }
    
    async fn update_block_status(&self, chain: &str, block_number: u64, status: BlockStatus) -> Result<()> {
        // Update block status in the database
        let mut transaction = self.pool.begin().await?;
        
        // Convert enum to string
        let status_str = match status {
            BlockStatus::Confirmed => "confirmed",
            BlockStatus::Safe => "safe",
            BlockStatus::Justified => "justified",
            BlockStatus::Finalized => "finalized",
        };
        
        // Update the status in the blocks table
        sqlx::query!(
            r#"
            UPDATE blocks
            SET status = $1
            WHERE chain = $2 AND block_number = $3
            "#,
            status_str,
            chain,
            block_number as i64
        )
        .execute(&mut *transaction)
        .await?;
        
        // Commit the transaction
        transaction.commit().await?;
        
        Ok(())
    }
    
    async fn get_latest_block_with_status(&self, chain: &str, status: BlockStatus) -> Result<u64> {
        // Convert enum to string
        let status_str = match status {
            BlockStatus::Confirmed => "confirmed",
            BlockStatus::Safe => "safe",
            BlockStatus::Justified => "justified",
            BlockStatus::Finalized => "finalized",
        };
        
        // Query the latest block with the given status
        let result = sqlx::query!(
            r#"
            SELECT MAX(block_number) as max_block
            FROM blocks
            WHERE chain = $1 AND status = $2
            "#,
            chain,
            status_str
        )
        .fetch_one(&self.pool)
        .await?;
        
        // Return the max block or 0 if no blocks found
        let max_block = result.max_block.unwrap_or(0) as u64;
        
        Ok(max_block)
    }
    
    async fn get_events_with_status(&self, filters: Vec<EventFilter>, status: BlockStatus) -> Result<Vec<Box<dyn Event>>> {
        // This is a more complex query that needs to join events with blocks
        // For this implementation, we'll just get all events and then filter by status
        
        // Convert enum to string
        let status_str = match status {
            BlockStatus::Confirmed => "confirmed",
            BlockStatus::Safe => "safe",
            BlockStatus::Justified => "justified",
            BlockStatus::Finalized => "finalized",
        };
        
        // Get the set of blocks with the given status
        let blocks = sqlx::query!(
            r#"
            SELECT chain, block_number
            FROM blocks
            WHERE status = $1
            "#,
            status_str
        )
        .fetch_all(&self.pool)
        .await?;
        
        // Create a map of chain to block numbers
        let mut chain_blocks = HashMap::new();
        for block in blocks {
            let chain_blocks_entry = chain_blocks
                .entry(block.chain.clone())
                .or_insert_with(Vec::new);
            chain_blocks_entry.push(block.block_number as u64);
        }
        
        // Get all events matching the filters
        let events = self.get_events(filters).await?;
        
        // Filter events to only include those from blocks with the given status
        let filtered_events = events
            .into_iter()
            .filter(|event| {
                // Get the set of blocks for this chain
                if let Some(blocks) = chain_blocks.get(event.chain()) {
                    // Check if the event's block is in the set
                    blocks.contains(&event.block_number())
                } else {
                    // No blocks for this chain, so filter out the event
                    false
                }
            })
            .collect();
        
        Ok(filtered_events)
    }

    #[instrument(skip(self, account_info, initial_libraries), fields(account_id = %account_info.id))]
    async fn store_valence_account_instantiation(
        &self,
        account_info: ValenceAccountInfo,
        initial_libraries: Vec<ValenceAccountLibrary>,
    ) -> Result<()> {
        let mut tx = self.pool.begin().await?;

        // Insert into valence_accounts
        sqlx::query!(
            r#"
            INSERT INTO valence_accounts (id, chain_id, contract_address, created_at_block, created_at_tx, current_owner, pending_owner, pending_owner_expiry, last_updated_block, last_updated_tx)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
            ON CONFLICT (id) DO UPDATE SET
                current_owner = EXCLUDED.current_owner, -- Allow re-instantiation/update if needed?
                pending_owner = EXCLUDED.pending_owner,
                pending_owner_expiry = EXCLUDED.pending_owner_expiry,
                last_updated_block = EXCLUDED.last_updated_block,
                last_updated_tx = EXCLUDED.last_updated_tx;
            "#,
            account_info.id,
            account_info.chain_id,
            account_info.contract_address,
            account_info.created_at_block as i64,
            account_info.created_at_tx,
            account_info.current_owner,
            account_info.pending_owner,
            account_info.pending_owner_expiry.map(|v| v as i64),
            account_info.last_updated_block as i64,
            account_info.last_updated_tx
        )
        .execute(&mut *tx)
        .await?;

        // Insert initial libraries
        for lib in initial_libraries {
            sqlx::query!(
                r#"
                INSERT INTO valence_account_libraries (account_id, library_address, approved_at_block, approved_at_tx)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (account_id, library_address) DO NOTHING; -- Ignore if already approved
                "#,
                lib.account_id,
                lib.library_address,
                lib.approved_at_block as i64,
                lib.approved_at_tx
            )
            .execute(&mut *tx)
            .await?;
        }

        tx.commit().await?;
        debug!(account_id = %account_info.id, "Stored Valence account instantiation");
        Ok(())
    }

    #[instrument(skip(self, library_info), fields(account_id = %account_id, library = %library_info.library_address))]
    async fn store_valence_library_approval(
        &self,
        account_id: &str,
        library_info: ValenceAccountLibrary,
        update_block: u64,
        update_tx: &str,
    ) -> Result<()> {
        let mut tx = self.pool.begin().await?;

        // Insert library approval
        sqlx::query!(
            r#"
            INSERT INTO valence_account_libraries (account_id, library_address, approved_at_block, approved_at_tx)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (account_id, library_address) DO NOTHING; -- Ignore if already approved
            "#,
            account_id,
            library_info.library_address,
            library_info.approved_at_block as i64,
            library_info.approved_at_tx
        )
        .execute(&mut *tx)
        .await?;

        // Update account's last_updated timestamp
        sqlx::query!(
            r#"
            UPDATE valence_accounts
            SET last_updated_block = $1, last_updated_tx = $2
            WHERE id = $3;
            "#,
            update_block as i64,
            update_tx,
            account_id
        )
        .execute(&mut *tx)
        .await?;

        tx.commit().await?;
        debug!(account_id = %account_id, library = %library_info.library_address, "Stored Valence library approval");
        Ok(())
    }

    #[instrument(skip(self), fields(account_id = %account_id, library = %library_address))]
    async fn store_valence_library_removal(
        &self,
        account_id: &str,
        library_address: &str,
        update_block: u64,
        update_tx: &str,
    ) -> Result<()> {
        let mut tx = self.pool.begin().await?;

        // Remove library
        sqlx::query!(
            r#"
            DELETE FROM valence_account_libraries
            WHERE account_id = $1 AND library_address = $2;
            "#,
            account_id,
            library_address
        )
        .execute(&mut *tx)
        .await?;

        // Update account's last_updated timestamp
         sqlx::query!(
            r#"
            UPDATE valence_accounts
            SET last_updated_block = $1, last_updated_tx = $2
            WHERE id = $3;
            "#,
            update_block as i64,
            update_tx,
            account_id
        )
        .execute(&mut *tx)
        .await?;

        tx.commit().await?;
        debug!(account_id = %account_id, library = %library_address, "Stored Valence library removal");
        Ok(())
    }

    #[instrument(skip(self, new_owner, new_pending_owner), fields(account_id = %account_id))]
    async fn store_valence_ownership_update(
        &self,
        account_id: &str,
        new_owner: Option<String>,
        new_pending_owner: Option<String>,
        new_pending_expiry: Option<u64>,
        update_block: u64,
        update_tx: &str,
    ) -> Result<()> {
        sqlx::query!(
            r#"
            UPDATE valence_accounts
            SET current_owner = $1, pending_owner = $2, pending_owner_expiry = $3, last_updated_block = $4, last_updated_tx = $5
            WHERE id = $6;
            "#,
            new_owner,
            new_pending_owner,
            new_pending_expiry.map(|v| v as i64),
            update_block as i64,
            update_tx,
            account_id
        )
        .execute(&self.pool) // Can run outside tx if simple update
        .await?;
        debug!(account_id = %account_id, "Stored Valence ownership update");
        Ok(())
    }

    #[instrument(skip(self, execution_info), fields(account_id = %execution_info.account_id, tx_hash = %execution_info.tx_hash))]
    async fn store_valence_execution(
        &self,
        execution_info: ValenceAccountExecution,
    ) -> Result<()> {
        // Convert SystemTime to chrono::DateTime<Utc> for sqlx
        let executed_at_chrono = chrono::DateTime::from(execution_info.executed_at);

        sqlx::query!(
            r#"
            INSERT INTO valence_account_executions (account_id, chain_id, block_number, tx_hash, executor_address, message_index, correlated_event_ids, raw_msgs, payload, executed_at)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
            "#,
            execution_info.account_id,
            execution_info.chain_id,
            execution_info.block_number as i64,
            execution_info.tx_hash,
            execution_info.executor_address,
            execution_info.message_index,
            execution_info.correlated_event_ids.as_deref(), // Convert Option<Vec<String>> to Option<&[String]>
            execution_info.raw_msgs.map(Json), // Wrap Option<Value> in Option<Json<Value>>
            execution_info.payload,
            executed_at_chrono
        )
        .execute(&self.pool)
        .await?;
        debug!(account_id = %execution_info.account_id, tx_hash=%execution_info.tx_hash, "Stored Valence execution");
        Ok(())
    }

    #[instrument(skip(self), fields(account_id = %account_id))]
    async fn get_valence_account_state(&self, account_id: &str) -> Result<Option<ValenceAccountState>> {
        // Fetch current owner
        let owner_result = sqlx::query!(
            "SELECT current_owner FROM valence_accounts WHERE id = $1",
            account_id
        )
        .fetch_optional(&self.pool)
        .await?;

        let libraries_result = sqlx::query!(
            "SELECT library_address FROM valence_account_libraries WHERE account_id = $1",
            account_id
        )
        .fetch_all(&self.pool)
        .await?;

        if let Some(owner_row) = owner_result {
            let libraries = libraries_result.into_iter().map(|row| row.library_address).collect();
            // We need more info (chain_id, address, pending etc.) from the DB 
            // to fully construct ValenceAccountState here. 
            // Placeholder - requires adjusting the query or struct.
            Ok(Some(ValenceAccountState {
                account_id: account_id.to_string(),
                chain_id: "".to_string(), // Placeholder
                address: "".to_string(), // Placeholder
                current_owner: owner_row.current_owner,
                pending_owner: None, // Placeholder
                pending_owner_expiry: None, // Placeholder
                libraries,
                last_update_block: 0, // Placeholder
                last_update_tx: "".to_string(), // Placeholder
            }))
        } else {
            Ok(None)
        }
    }

    // --- Default Implementations for New Valence Methods ---

    async fn set_valence_account_state(&self, _account_id: &str, _state: &ValenceAccountState) -> Result<()> {
        // Postgres currently relies on individual updates (store_valence_library_approval etc.)
        // This method might be used for bulk updates or initial state setting if needed.
        warn!("set_valence_account_state not fully implemented for Postgres");
        Ok(())
    }

    async fn delete_valence_account_state(&self, _account_id: &str) -> Result<()> {
        warn!("delete_valence_account_state not implemented for Postgres");
        Ok(())
    }

    async fn set_historical_valence_account_state(
        &self,
        _account_id: &str,
        _block_number: u64,
        _state: &ValenceAccountState,
    ) -> Result<()> {
        // Historical state is intended for RocksDB primarily
        Ok(())
    }

    async fn get_historical_valence_account_state(
        &self,
        _account_id: &str,
        _block_number: u64,
    ) -> Result<Option<ValenceAccountState>> {
        // Historical state is intended for RocksDB primarily
        Ok(None)
    }

    async fn delete_historical_valence_account_state(
        &self,
        _account_id: &str,
        _block_number: u64,
    ) -> Result<()> {
        // Historical state is intended for RocksDB primarily
        Ok(())
    }

    async fn set_latest_historical_valence_block(
        &self,
        _account_id: &str,
        _block_number: u64,
    ) -> Result<()> {
        // Historical state is intended for RocksDB primarily
        Ok(())
    }

    async fn get_latest_historical_valence_block(&self, _account_id: &str) -> Result<Option<u64>> {
        // Historical state is intended for RocksDB primarily
        Ok(None)
    }

    async fn delete_latest_historical_valence_block(&self, _account_id: &str) -> Result<()> {
        // Historical state is intended for RocksDB primarily
        Ok(())
    }
}

impl PostgresStorage {
    /// Create a new PostgreSQL storage
    pub async fn new(config: PostgresConfig) -> Result<Self> {
        // Create a connection pool
        let pool_options = sqlx::postgres::PgPoolOptions::new()
            .max_connections(config.max_connections)
            .acquire_timeout(std::time::Duration::from_secs(config.connection_timeout));
        
        let pool = pool_options.connect(&config.url)
            .await
            .map_err(|e| Error::generic(format!("Failed to connect to PostgreSQL: {}", e)))?;
        
        info!("Connected to PostgreSQL database");
        
        // Initialize database tables
        initialize_database(&pool).await?;
        
        // Create repositories
        let event_repository = Arc::new(PostgresEventRepository::new(pool.clone()));
        let contract_schema_repository = Arc::new(PostgresContractSchemaRepository::new(pool.clone()));
        
        Ok(Self {
            pool,
            event_repository,
            contract_schema_repository,
        })
    }
    
    /// Store a contract schema
    pub async fn store_contract_schema(&self, chain: &str, address: &str, schema_data: &[u8]) -> Result<()> {
        self.contract_schema_repository.store_schema(chain, address, schema_data).await
    }
    
    /// Get a contract schema
    pub async fn get_contract_schema(&self, chain: &str, address: &str) -> Result<Option<Vec<u8>>> {
        self.contract_schema_repository.get_schema(chain, address).await
    }
}
